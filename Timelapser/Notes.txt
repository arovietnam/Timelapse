USING FFMPEG
============

Used libraries (a) and (b) to create an AVI file and MP4/Webm files.

Started with downloading an image from Camba server (step#1). The image url is returned from CambaAPI (http://webapi.camba.tv/v1/cameras/{cameraid}/live)
Then created a new .AVI file with that image (step#2)
Because the size of that AVI file is quite large, I compressed it using FFMPEG.exe in (step#3)
Finally I converted compressed .AVI file to .MP4 and .WEBM (step#4 & step#5)

Next:
-----
A. FFMPEG should be used to directly create new MP4 file and should concatenate every next frame to existing video. This way we shall get rid of AVI files and save processing/space.
B. When the file size will grow upto 100s of MBs then may be we have to consider splitting it for better client side download experience.

REFERENCES:
-----------
a: AVI library: http://www.codeproject.com/Articles/7388/A-Simple-C-Wrapper-for-the-AviFile-Library
b: FFMPEG library: http://www.ffmpeg.org/ffmpeg-formats.html

CODE:
-----
string tempVideoFileName = "tempCODE.avi";
string aviFileName = "CODE.avi";
string mp4FileName = "CODE.mp4";
string webmFileName = "CODE.webm";

1. string imageFile = DownloadSnapshot();
2. GenerateVideo(tempVideoFileName, imageFile);
3. CompressVideo(tempVideoFileName, aviFileName);
4. ConvertAviToMp4(aviFileName, mp4FileName);
5. ConvertAviToWebm(aviFileName, webmFileName);

public string DownloadSnapshot()
{
	// Sending POST request to CambaAPI v1/cameras/{cameraid}/live
	// that saves an image locally on server and sends back its URL
	string tempfile = Path.Combine(Program.DownPath, index + ".jpg");
	var client = new RestClient(Settings.CambaAPIUrl);
    var request = new RestRequest("v1/cameras/" + timelapse.CameraId + "/live", Method.POST);
    var snapurl = client.Execute<ResponseMessage>(request);

	// downloads the image from server as 0.jpg, 1.jpg, etc.
    if (Storage.DownloadFile(snapurl.Data.message, tempfile))
		return tempfile;
	
	return "";
}

// videofilename = "tempCODE.avi"
// imageFile = "0.jpg"
public void GenerateVideo(string videofilename, string imageFile)
{
    bool creatingFile = false;
    try
    {
        const double rate = 5;
        VideoStream aviStream = null;
        AviManager aviManager = null;
        Bitmap bitmap = null;

        if (!fileCreated)	// first time creating source .avi file
        {
            aviManager = new AviManager(videofilename, false);
            bitmap = new Bitmap(imageFile);
            aviStream = aviManager.AddVideoStream(false, rate, bitmap);
            fileCreated = true;

            TimelapseDao.UpdateStatus(timelapse.Code, TimelapseStatus.Processing);
        }
        else				// next time adding frame to source .avi file
        {
            aviManager = new AviManager(videofilename, true);
            aviStream = aviManager.GetVideoStream();
            bitmap = new Bitmap(imageFile);
            if (aviStream != null) aviStream.AddFrame(bitmap);
        }

        if (bitmap != null) bitmap.Dispose();
        if (aviManager != null) aviManager.Close();
    }
    catch (Exception x)
    {
        Console.WriteLine("MakeVideo Error: " + x.Message);
    }
}

// sourceFileName = "tempCODE.avi"
// outputFile = "CODE.avi"
public void CompressVideo(string sourceFileName, string outputFile)
{
	// runs FFMPEG.exe with following parameters
    RunProcess(" -i " + sourceFileName + " -b:v 250k  -vbsf h264_mp4toannexb -s " + dimension.Width + "x" + dimension.Height + " -y " + outputFile);
}

// sourceFileName = "CODE.avi"
// outputFile = "CODE.mp4"
public void ConvertAviToMp4(string sourceFileName, string outputFile)
{
	// runs FFMPEG.exe with following parameters
    RunProcess("-i " + sourceFileName + " -vcodec libx264 -vprofile main -preset slow -b:v 250k -maxrate 500k -bufsize 1000k -vf scale=-1:" + dimension.Height + " -threads 2 -y " + outputFile);
}

// sourceFileName = "CODE.avi"
// outputFile = "CODE.webm"
public void ConvertAviToWebm(string sourceFileName, string outputFile)
{
	// runs FFMPEG.exe with following parameters
    RunProcess(" -i " + sourceFileName + " -codec:v libvpx -quality good -cpu-used 4 -b:v 250k -qmin 10 -qmax 42 -maxrate 500k -bufsize 1000k -threads 2 -vf scale=-1:" + dimension.Height + " -y " + outputFile);
}

public string RunProcess(string parameters)
{
    ProcessStartInfo start = new ProcessStartInfo();
    start.FileName = FfmpegExePath;
    start.Arguments = parameters;
    start.UseShellExecute = false;
    start.RedirectStandardError = true;

    Process process = new Process();
    start.CreateNoWindow = true;
    process.StartInfo = start;
    process.Start();
    process.WaitForExit(5000);
    string output = process.StandardError.ReadToEnd();
    try
    {
        KillProcess(process.Id);
        return "";
    }
    catch (Exception x)
    {
        return x.Message;
    }
}

///////////////////////////////////////////////

Code to Build Timelapse from Recorded Snapshots
===============================================
//private ArrayList _arMovies = new ArrayList();
//private void CreateTimelapse()
//{
//    try
//    {
//        var extractedList = new List<MongoSnapshot>();
//        var mm = new MovieMaker(delegate(string str) { });

//        Camera c = CameraDao.GetCamera(timelapse.CameraId);
//        TimeZoneInfo tzi = DateTimeUtils.GetTimeZoneInfo(c.Timezone);

//        var snaps = MongoSnapshotDao.GetSnapshotsBetween(c.Id,
//            DateTimeUtils.GetFormattedDT(timelapse.FromDT),
//            DateTimeUtils.GetFormattedDT(timelapse.ToDT),
//            c.ServerIp);

//        log = "Found Total " + snaps.Count + " snapshots between " + timelapse.FromDT + " and " + timelapse.ToDT;
//        TimelapseLog(timelapse, log);
//        Console.WriteLine(log);

//        bool loopStart = true;
//        var currentTime = new DateTime();
//        foreach (var snapshot in snaps)
//        {
//            // RECHECK this condition at runtime !!!
//            if (loopStart)
//            {
//                extractedList.Add(snapshot);
//                currentTime = DateTimeUtils.ParseFormattedDT(snapshot._id).AddMinutes(timelapse.SnapsInterval);
//                loopStart = false;
//            }
//            else if (currentTime.TimeOfDay <= DateTimeUtils.ParseFormattedDT(snapshot._id).TimeOfDay)
//            {
//                int level = timelapse.MDThreshold > 0 ? timelapse.MDThreshold : timelapse.MDThreshold;
//                if (timelapse.EnableMD)
//                {
//                    if (snapshot.ML > level)
//                    {
//                        extractedList.Add(snapshot);
//                        currentTime = DateTimeUtils.ParseFormattedDT(snapshot._id).AddMinutes(timelapse.SnapsInterval);
//                    }
//                }
//                else
//                {
//                    extractedList.Add(snapshot);
//                    currentTime = DateTimeUtils.ParseFormattedDT(snapshot._id).AddMinutes(timelapse.SnapsInterval);
//                }
//            }
//        }

//        log = "Extracted Total " + extractedList.Count + " snapshots between " + timelapse.FromDT + " and " + timelapse.ToDT;
//        TimelapseLog(timelapse, log);
//        Console.WriteLine(log);

//        log = Environment.NewLine + "Download Path = " + Program.DownPath;
//        Console.WriteLine(log);
//        log = Environment.NewLine + "Upload Path = " + Program.UpPath;
//        Console.WriteLine(log + Environment.NewLine);
                
//        // Processing started
//        TimelapseDao.UpdateStatus(timelapse.Code, TimelapseStatus.Processing);

//        _arMovies.Clear();
//        if (GetSnapshots(c, extractedList, Program.DownPath, Program.UpPath))
//        {
//            string aviFileName = Path.Combine(Program.UpPath, timelapse.Code + ".avi");
//            string mp4FileName = Path.Combine(Program.UpPath, timelapse.Code + ".mp4");
//            string webmFileName = Path.Combine(Program.UpPath, timelapse.Code + ".webm");
//            string ogvFileName = Path.Combine(Program.UpPath, timelapse.Code + ".ogv");

//            Console.WriteLine("Joining AVI... " + aviFileName);
//            mm.JoinVideos(aviFileName, _arMovies);
//            Console.WriteLine(" [ DONE ]" + Environment.NewLine);

//            Console.WriteLine("Creating MP4... " + mp4FileName);
//            mm.ConvertAviToMp4(aviFileName, mp4FileName);
//            Console.WriteLine(" [ DONE ]" + Environment.NewLine);

//            Console.WriteLine("Creating WEBM... " + webmFileName);
//            mm.ConvertAviToWebm(aviFileName, webmFileName);
//            Console.WriteLine(" [ DONE ]" + Environment.NewLine);

//            log = "COMPLETED @ " + DateTime.Now;
//            TimelapseLog(timelapse, log);
//            Console.WriteLine(log);

//            TimelapseDao.UpdateStatus(timelapse.Code, TimelapseStatus.Completed);
//        }
//        else
//        {
//            log = "FAILED @ " + DateTime.Now;
//            TimelapseLog(timelapse, log);
//            Console.WriteLine(log);
//            TimelapseDao.UpdateStatus(timelapse.Code, TimelapseStatus.Failed);
//        }
//    }
//    catch (Exception x)
//    {
//        TimelapseDao.UpdateStatus(timelapse.Code, TimelapseStatus.Failed);
//        TimelapseLog(timelapse, "Recorder.CreateTimelapse Error: " + x.ToString());
//        Console.WriteLine(x.ToString());
//        ExitProcess(true);
//    }
//    ExitProcess(true);
//}

//protected bool GetSnapshots(Camera cam, List<MongoSnapshot> snapshots, string downPath, string upPath)
//{
//    try
//    {
//        int num = 0;
//        if (snapshots.Count == 0)
//        {
//            TimelapseDao.UpdateStatus(timelapse.Code, TimelapseStatus.Completed);
//            TimelapseLog(timelapse, "FINISHED with 0 snapshots.");
//            return false;
//        }

//        // makes 1 clip with 1000 snapshots at max.
//        decimal totalvideos = Math.Ceiling(snapshots.Count / (decimal)1000);
//        MovieMaker mm = new MovieMaker(delegate(string str) { });
//        for (int no = 0; no < totalvideos; no++)
//        {
//            int startindex, lastindex = 1000;
//            if (no == 0)
//                startindex = no * 1000;
//            else
//                startindex = no * 1000 + 1;
//            if (startindex + lastindex > snapshots.Count)
//                lastindex = snapshots.Count - startindex;

//            DownloadSnapshots(cam.Id, snapshots.GetRange(startindex, lastindex), downPath, upPath, cam.ServerIp, ref num);

//            /*For Creating video on any server server*/
//            string sourceaviFile = Path.Combine(downPath + timelapse.Code + ".avi");
//            string destaviFileName = Path.Combine(upPath, timelapse.Code + ".avi");
//            _arMovies.Add(destaviFileName);

//            Console.WriteLine("Creating AVI... " + destaviFileName);
//            mm.GenerateAviVideo(downPath, sourceaviFile);
//            mm.CompressAvi(sourceaviFile, destaviFileName);
//            File.Delete(sourceaviFile);
//            Console.WriteLine(" [ DONE ]" + Environment.NewLine);
//        }
//        return true;
//    }
//    catch (Exception x)
//    {
//        TimelapseLog(timelapse, "GetSnapshots Error: " + x.ToString());
//        return false;
//    }
//}

//protected void DownloadSnapshots(int camId, IEnumerable<MongoSnapshot> snapshots, string downPath, string upPath, string serverIp, ref int idx)
//{
//    int count = 0;
//    bool first = true;
//    var wc = new WebClient();
//    foreach (MongoSnapshot snapshot in snapshots)
//    {
//        string url = SnapshotService.GetSnapshotUrl(snapshot._id, snapshot.ID, camId, DateTimeUtils.ParseFormattedDT(snapshot._id), serverIp);
//        string fullFileName = Path.Combine(downPath, "frame" + idx.ToString("000000") + ".jpg");
//        Console.WriteLine("Downloading... " + fullFileName + Environment.NewLine);
//        try
//        {
//            wc.DownloadFile(url, fullFileName);
//            count++;
//            if (first)
//            {
//                string upFileName = Path.Combine(upPath, timelapse.Code + ".jpg");
//                string thumbFileName = Path.Combine(upPath, timelapse.Code + "_t.jpg");

//                using (var image = Image.FromFile(fullFileName))
//                {
//                    using (var poster = image.GetThumbnailImage(640, 480, null, IntPtr.Zero))
//                    {
//                        poster.Save(upFileName);
//                    }
//                }
//                using (var image = Image.FromFile(fullFileName))
//                {
//                    using (var thumbnail = image.GetThumbnailImage(200, 200, null, IntPtr.Zero))
//                    {
//                        thumbnail.Save(thumbFileName);
//                    }
//                }

//                first = false;
//            }
//        }
//        catch (Exception x)
//        {
//            TimelapseLog(timelapse, "DownloadSnapshots Error: " + x.ToString());
//            continue;
//        }
//        idx++;
//    }
//    Console.WriteLine(Environment.NewLine + count + " Snapshots downloaded successfully. Now creating timelapse videos. " + Environment.NewLine);
//}